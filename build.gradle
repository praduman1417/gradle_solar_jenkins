import org.apache.tools.ant.filters.ReplaceTokens;


ext {    
       springVersion = "3.2.8.RELEASE"
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:0.1.10'
  }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'ssh'
//apply plugin: 'eclipse'
//apply plugin: 'eclipse-wtp'
apple plugin: 'solar-runner'
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

ssh {
    config(StrictHostKeyChecking: 'no')
    outputLogLevel = LogLevel.DEBUG
}


sourceSets {
    integrationTest {
        java.srcDir file('src/test/integration/java')
        resources.srcDir file('src/test/integration/resources')
    }
}

project.ext {
    environment = System.getProperty('env') == null ? 'dev' : System.getProperty('env')    
    program = System.getProperty('spring.profiles.active')
    databaseContext = System.getProperty('databaseContext') == null ? 'devl' : System.getProperty('databaseContext')
    job = System.getProperty('job')

    props = new Properties()
    def propFile = file("src/main/filters/${environment}.deploy.properties")
    props.load(new FileInputStream(propFile))
    props.putAll(System.properties)

    jobMap = [
            ("cmrJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["cmrJob"]]
            ,("uploadImeiEsnJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["uploadImeiEsnJob"]]
            ,("preReceiptNotificationJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"1024m", args:["preReceiptNotificationJob"]]
            ,("cartonHistoryMigrationJob"):[class:"com.flipswap.migration.MigrateCartonHistory", memory:"512m"]
            ,("closeOlderTradesJob"):[class:"com.flipswap.job.CloseOlderTradesJob", memory:"1024m", args:["@months"]]
            ,("copyCategoryModels"):[class:"com.flipswap.standalone.CopyCategoryModels", memory:"512m", args:["@parentCategory", "@childCategory", "@updateModels", "@email", "@modelIdsToSync"]]
            ,("shipmentTrackingServiceJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["fedExShipmentTrackingJob"]]
            ,("updateGeoStateJob"):[class:"com.flipswap.job.UpdateStateJob", memory:"256m"]
            ,("listenForLockItemTasks"):[class:"com.flipswap.job.LockItemWorkListener", memory:"512m"]
            ,("makePaymentsJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["makePaymentsJob"]]
            ,("markItemsPaidJob"):[class:"com.flipswap.job.MarkItemsPaidJob", memory:"512m", args:["@readFromDatabase", "@errorFilePath", "@csvPath", "@itemsBatchSize", "@workflow"]]
            ,("migrateSprintReceiptDateJob"):[class:"com.flipswap.job.migration.MigrateSprintReceiptDateJob", memory:"512m", args:["@days"]]
            ,("applyModelChangesTask"):[class:"com.flipswap.job.ApplyModelChangesJob", memory:"512m", args:["@emailAddress"]]
            ,("listenForPaymentTasks"):[class:"com.flipswap.job.PaymentWorkListener", memory:"512m"]
            ,("itemMigrationJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["itemMigrationJob", "@itemId", "@errorFilePath", "@startDate", "@endDate"]]
            ,("MonthlyAuditReportTalendJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["monthlyAuditReportTalendJob", "@outputFileLocation", "@startDate", "@endDate"]]
            ,("retryFailedBackMigratedItemsJob"):[class:"com.flipswap.job.RetryFailedBackMigratedItemsJob", memory:"512m"]
            ,("sendEmailForNotShippedItemsJob"):[class:"com.flipswap.job.SendEmailForNotShippedItemsJob", memory:"256m", args:["@emailType", "@days", "@instoreURL", "@categoryCode"]]
            ,("sendWeeklySummaryEmailJob"):[class:"com.flipswap.job.SendWeeklySummaryEmailJob", memory:"512m", args:["@daysExceptionReport", "@daysCancellationReport", "@daysAdjustmentReport", "@categoryCode"]]
            ,("sendWeeklyAdjustmentReportJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["sendWeeklyAdjustmentReportJob", "@days"]]
            ,("fedExPickupJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["fedExPickupJob"]]
            ,("uploadSSOUsersJob"):[class:"com.flipswap.job.UploadSSOUsersJob", memory:"512m", args:["@emailAddress", "@modelFileLoc"]]
            ,("InsertOrUpdateModelcatalog"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["InsertOrUpdateModelcatalogJob", "@insertOrUpdate.companyId"]]
            ,("uploadTACNumber"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["uploadTACNumberJob"]]
            ,("validateAndUploadModelTask"):[class:"com.flipswap.job.ValidateAndUploadModelJob", memory:"512m", args:["@emailAddress", "@modelFileLoc", "@categoryCode"]]
            ,("sendEmailDailyInspectedItemsJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["sendDailyInspectedItemsJob", "@locale"]]
            ,("esnUploadJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["esnUploadJob", "@promotionCode", "@esnFilePath"]]
            ,("giftCardReaderJob"):[class:"com.flipswap.job.GiftCardReaderJob", memory:"512m", args: ["@noOfRec"]]
            ,("markEligibleQuotesAsExpiredJob"):[class:"com.flipswap.job.MarkEligibleQuotesAsExpiredJob", memory:"512m", args: ["@itemsBatchSize"]]
            ,("reconciledItemsJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["reconciledItemsJob"]]
            ,("RegionsUploadJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["regionsUploadJob", "@csvFilePath"]]
            ,("CreditAdjustmentJob"):[class:"com.flipswap.job.CreditAdjustmentJob", memory:"512m", args:["@csvPath"]]
            ,("sendGiftCardMailforInvoiceJob"):[class:"com.flipswap.job.SendGiftCardMailforInvoiceJob", memory:"512m", args:["@csvPath"]]
            ,("unShippedItemsJob"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["unShippedItemsJob"]]
            ,("activateVirtualGiftCardsJob"):[class:"com.flipswap.job.ActivateVirtualGiftCardsJob", memory:"512m", args:["@size"]]
            ,("sendInspectedItemsEmailJob"):[class:"com.flipswap.job.SendInspectedItemsEmailJob", memory:"512m", args:["@isForB2B", "@size"]]
            ,("sendNotCompletedQuotesJob"):[class:"com.flipswap.job.SendQuoteNotCompletedEmailJob", memory:"512m", args:["@days", "@size"]]
            ,("sendReminderPendingReceiptItemsJob"):[class:"com.flipswap.job.SendReminderPendingReceiptItemsJob", memory:"512m", args:["@days", "@size"]]
            ,("updateECPDIDTask"):[class:"com.flipswap.job.UpdateECPDIDJob", memory:"512m", args:["@quoteFileLoc"]]
            ,("verifyMTNResponseJob"):[class:"com.flipswap.job.VerifyMTNResponseJob", memory:"512m", args:["@mobileNoList"]]
            ,("populateFileToDB"):[class:"com.flipswap.migration.PopulateFileInDB", memory:"512m", args:["@constantCode", "@filePath"]]
			,("giftCardLoaderJob"):[class:"com.flipswap.job.GiftCardLoaderJob", memory:"512m", args:["@fileLoc", "@programName"]]
			,("MigrationValidationTalendJob"):[class:"com.flipswap.job.migration.MigrationValidationTalendJob", memory:"512m", args:["@startDate", "@endDate", "@filePath", "@siteName"]]
			,("uploadSingleUsePromoFile"):[class:"com.flipswap.batch.TradeInJobLauncher", memory:"512m", args:["uploadSingleUsePromoFileJob"]]
			,("sendPendingOrExpiredInvoiceQuotesEmailJob"):[class:"com.flipswap.job.SendPendingOrExpiredInvoiceQuotesEmailJob", memory:"512m", args:["@emailType","@noOfDays"]]
			,("updatePaymentsJob"):[class:"com.flipswap.job.UpdatePaymentsJob", memory:"512m", args:["@uploadCsvPath","@itemsBatchSize"]]
    ]
}

compileJava.options.encoding = 'ISO-8859-1'
compileTestJava.options.encoding = 'ISO-8859-1'

//These assume Jenkins in use and on the proper node already
remotes {
    dev {
        role('dev')
        host = 'dev.erecyclingcorps.com'
        user = 'deploy'  
        identity = file('/home/deploy/.ssh/id_rsa') 
    }
    qa {
        role('qa')
        host = 'qa.erecyclingcorps.com'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa') 
    }
    qa_prod {
        role('qa_prod')
        host = 'qa-prod.erecyclingcorps.com'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa') 
    }
    uat {
        role('uat')
        host = 'uat.erecyclingcorps.com'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa') 
    }
    erp_uat {
        role('erp_uat')
        host = 'erp-uat.erecyclingcorps.com'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa')
    }

    erp_conversion {
        role('erp_conversion')
        host = 'erp-conversion.erecyclingcorps.com'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa')
    }

    eu_uat {
        role('eu_uat')
        host = 'eu-uat'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa')
    }

    eu_staging {
        role('eu_staging')
        host = 'eu-uat'
        user = 'deploy'
        identity = file('/home/deploy/.ssh/id_rsa')
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://repo.springsource.org/release"
    }

    maven {
        credentials {
            username 'dev'
            password 'WLf2NBk9WuFc376'
        }
        url "http://build.erecyclingcorps.com:8081/artifactory/libs-release-local"
    }
    
    maven { 
        url "http://repo.jfrog.org/artifactory/third-party-releases-local"
    }
    
    maven { url "http://repo.springsource.org/libs-milestone" }
    maven { url "http://repo.springsource.org/libs-snapshot" }
    maven { url 'http://repo.spring.io/milestone' }
    
}

configurations {    
    ajc
    aspects 
    ajInpath
    cxf    
    liquibase
    jobRuntime
    compile {
        extendsFrom aspects
    }    

    //DO NOT REMOVE THESE!
    all*.exclude group: 'org.springframework', module: 'spring-support'
    all*.exclude group: 'org.springframework', module: 'spring-dao'
    all*.exclude group: 'org.springframework', module: 'spring'
    all*.exclude group: 'cglib', module: 'cglib'
    all*.exclude group: 'asm', module: 'asm'
    all*.exclude group: 'org.apache.geronimo.specs'
    all*.exclude module:'javax.wsdl'
    all*.exclude group: 'org.hibernate', module: 'ejb3-persistence'
	all*.exclude group: 'commons-logging', module: 'commons-logging'
	all*.exclude group: 'org.slf4j', module: 'jul-to-slf4j'
	all*.exclude group: 'log4j', module: 'log4j'
    //There is a bug in the POM for flute.  For now exclude it unless there are issues in which case
    //we'll need to add it to our own maven repo
    all*.exclude group: 'org.milyn', module: 'flute'
}

dependencies {

    liquibase ('org.liquibase:liquibase-core:2.0.3'
              ,'org.postgresql:postgresql:9.2-1003-jdbc4')
    cxf 'org.apache.cxf:cxf-anttasks:2.1.10'
    ajc 'org.aspectj:aspectjtools:1.7.3'
    aspects 'org.springframework:spring-aspects:'+ springVersion
    providedCompile (
            'javax.servlet:jsp-api:2.0'
            ,'javax.servlet:servlet-api:2.4'
            ,'org.apache.tomcat:jasper:6.0.37'
    )
    compile (
  			'com.erecyclingcorps:core-transport-base-client:1.9.16.6.1'
  			,'com.erecyclingcorps:ce-transport-dto:9.18.1'
			,'redis.clients:jedis:2.6.0'
			,'com.fasterxml.jackson.core:jackson-databind:2.3.0'
			,'org.springframework.integration:spring-integration-core:3.0.1.RELEASE'
			,'org.springframework.integration:spring-integration-amqp:3.0.1.RELEASE'
			,'org.springframework.integration:spring-integration-stream:3.0.1.RELEASE'
			,'org.springframework.data:spring-data-redis:1.2.1.RELEASE'
			,'org.springframework.data:spring-data-elasticsearch:1.0.0.M2'
            ,'org.apache.ant:ant:1.7.0'
            ,'org.liquibase:liquibase-core:2.0.3'
            ,'commons-httpclient:commons-httpclient:3.1'
            ,'commons-io:commons-io:2.3'
            ,'commons-lang:commons-lang:2.4'
            ,'javax.mail:mail:1.4.1'
            ,'org.acegisecurity:acegi-security:1.0.3'
            ,'org.apache.cxf:cxf-bundle-minimal:2.2.3'
            ,'org.apache.wicket:wicket:1.3.6'
            ,'org.apache.wicket:wicket-datetime:1.3.6'
            ,'org.apache.wicket:wicket-spring:1.3.6'
            ,'org.apache.wicket:wicket-spring-annot:1.3.6'
            ,'org.apache.wicket:wicket-velocity:1.3.6'
            ,'org.apache.wicket:wicket-extensions:1.3.6'
            ,'org.apache.velocity:velocity:1.7'
            ,'org.hibernate:hibernate:3.3.2.GA'
            ,'org.hibernate:hibernate-core:3.3.2.GA'
            ,'org.hibernate:hibernate-annotations:3.3.1.GA'
            ,'org.springframework:spring-aop:' + springVersion
            ,'org.springframework:spring-beans:' + springVersion
            ,'org.springframework:spring-context:' + springVersion
            ,'org.springframework:spring-expression:' + springVersion
            ,'org.springframework:spring-jdbc:' + springVersion
            ,'org.springframework:spring-orm:' + springVersion
            ,'org.springframework:spring-tx:' + springVersion
            ,'org.springframework:spring-web:' + springVersion
            ,'org.springframework:spring-webmvc:' + springVersion
            ,'org.springframework.batch:spring-batch-core:2.1.8.RELEASE'
            ,'org.springframework.amqp:spring-amqp:1.1.3.RELEASE'
            ,'org.springframework.amqp:spring-rabbit:1.1.3.RELEASE'
            ,'org.json:json:20090211'
            ,'org.htmlparser:htmlparser:1.6'
            ,'org.opensaml:opensaml:2.5.1-1'  //MUST USE the -1 version due to bug in POM relying on Xerces!
            ,'org.opensaml:xmltooling:1.3.2-1' //MUST USE the -1 version!
            ,'org.opensaml:openws:1.4.2-1' //MUST USE the -1 version!
            ,'com.lowagie:itext:4.2.1'
            ,'org.apache.poi:poi:3.9'
            ,'javax.validation:validation-api:1.0.0.GA'
            ,'commons-digester:commons-digester:1.8.1'
            ,'commons-validator:commons-validator:1.1.4'
            ,'net.sf.ehcache:ehcache:2.8.3'
            ,'org.apache.commons:commons-math:2.0'
            ,'net.sourceforge.jexcelapi:jxl:2.6.12'
            ,'org.apache.poi:poi-ooxml:3.9'
            ,'org.aspectj:aspectjrt:1.7.3'
            ,'cglib:cglib-nodep:2.2'
            ,'com.rabbitmq:amqp-client:2.8.4'
            ,'asm:asm-all:3.2'
            ,'com.amazon:amazon-s3client:20131122'
            ,'com.amazon:amazon-ws:20131122'
            ,'esgatekeeperCookieDecryption:esgatekeeperCookieDecryption:1.0'
            ,'com.fedex:fedex-pickup:v3'
            ,'com.fedex:fedex-tracking:v5'
            ,'com.fedex:fedex-shipping:v9'
            ,'gis:gis:1.0'
            ,'com.erecyclingcorps:erecyclingcorps-imeivalidation:20131122'
            ,'com.infopia:infopia-inventory:1.0'
            ,'com.infopia:infopia-ws:1.0'
            ,'com.orange:orange-sso:20131122'
            ,'com.orange:orange-voucherManagement:20131122'
            ,'osworkflow:osworkflow:2.8.0'
            ,'com.erecyclingcorps:erecyclingcorps-pricing:20131122'
            ,'com.purolator:purolator-shipping:20131122'
            ,'com.dhl:dhl-shipping:20131122'
            ,'com.dhl:dhl-shipping-de:20131122'
            ,'com.talend:talend-advancedPersistentLookup:1.0'
            ,'com.talend:talend-fileEnhanced:20070724'
            ,'com.vzw:vzw-email:20140325'
            ,'com.wellsfargo:wellsfargo-paymentManager:1.0'
            ,'com.talend:talend-systemRoutines:1.0'
            ,'com.rim:rim-imei:1.0'
            ,'org.slf4j:slf4j-api:1.7.5'
            ,'org.slf4j:slf4j-jdk14:1.7.5'
            ,'org.eclipse.birt.runtime:org.eclipse.birt.runtime:4.3.1'
            ,'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
            ,'com.erecyclingcorps:erecyclingcorps-springBirt-integration:20131122'
            ,'com.oracle:crm-ws:20140813'
            ,'com.purolator:purolator-tracking:20131216'
            ,'com.ibm.icu:icu4j:50.1.1'
            ,'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
            ,'gui.ava:html2image:0.9'
            ,'org.springframework.data:spring-data-redis:1.2.0.RELEASE'
            ,'redis.clients:jedis:2.4.1'
            ,'ch.qos.logback:logback-classic:1.1.2'
            ,'ch.qos.logback:logback-core:1.1.2'
            ,'org.jasig.cas:cas-client-core:3.1.3'
            ,'org.acegisecurity:acegi-security-cas:1.0.3'
            ,'cas:casclient:2.1.1'
            ,'net.sf.dozer:dozer:5.5.1'
            ,'net.sf.dozer:dozer-spring:5.5.1'
			,'com.google.guava:guava:17.0'
			,'com.erecyclingcorps.ce-app:att-CTN:1.0'
    )

    runtime (
    		'com.erecyclingcorps:core-transport-base-client:1.9.16.5TEST'
            ,'opensymphony:sitemesh:2.2.1'
            ,'org.apache.httpcomponents:httpclient:4.3.5'
            ,'jstl:jstl:1.2'
            ,'org.hibernate:hibernate-validator:4.0.2.GA'
            ,'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
            ,'commons-fileupload:commons-fileupload:1.2.2'
                
    )
    jobRuntime (
            'org.postgresql:postgresql:9.2-1003-jdbc4'
    )
    
    testCompile (
			'org.postgresql:postgresql:9.2-1003-jdbc4'
			,'org.testng:testng:6.8.7'
			,'org.springframework:spring-test:' + springVersion
			,'org.mockito:mockito-core:1.9.5'
			,'org.apache.commons:commons-math:2.2'
			,'br.com.six2six:fixture-factory:2.2.0'
    )
    
    testRuntime (
			'commons-dbcp:commons-dbcp:1.4'
    )
    			
    integrationTestCompile (
			sourceSets.main.output
			,configurations.testCompile
			,sourceSets.test.output
	)
	
    integrationTestRuntime (
			configurations.testRuntime
	)

}

war {
    filter(ReplaceTokens, tokens: project.props)
    baseName = 'ROOT'    
    webXml = file(sourceSets.main.output.resourcesDir.absolutePath + "/WEB-INF/root-web.xml")
    from(sourceSets.main.output.resourcesDir.absolutePath + "/META-INF"){
        into('META-INF')
        include('*.*')
       if (!program.equals('or_ro')) {
         rootSpec.excludes = ['**/logback-classic*.jar','**/logback-core*.jar']
     }
    }    
}


task explodedWar(type: Copy) {
    into "$buildDir/web"
    with war
}

task integrationTest(type: Test) {
	//useTestNG()
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test {
	//useTestNG()
}

task listenerWar(type: War, dependsOn: classes) { 
    filter(ReplaceTokens, tokens: project.props)
    baseName = 'LISTENER'
    webXml = file(sourceSets.main.output.resourcesDir.absolutePath + "/WEB-INF/listener-web.xml")
    from(sourceSets.main.output.resourcesDir.absolutePath + "/META-INF"){
        into('META-INF')
        include('*.*')
      if (!program.equals('or_ro')) {
         rootSpec.excludes = ['**/logback-classic*.jar','**/logback-core*.jar']
     }
    }
}

task updateDatabase(dependsOn: classes) << {
    ant.taskdef (
            resource: 'liquibasetasks.properties'
            ,classpath: configurations.liquibase.asPath
    )

    ant.path(id: 'classpath') {
        ant.pathelement(path: configurations.liquibase.asPath)
        ant.pathelement(path: sourceSets.main.runtimeClasspath.asPath)
    }

    ant.updateDatabase (
            changeLogFile: 'src/etc/liquibase/masterdb_changelog.xml'
            ,url: project.props.getProperty('jdbc.url')
            ,username: project.props.getProperty('jdbc.username')
            ,password: project.props.getProperty('jdbc.password')
            ,dropFirst: false
            ,classpathref: 'classpath'
            ,contexts: project.databaseContext
    )
}

task deploy(dependsOn: [war, listenerWar]) << {  

    if (environment.equals('prod')) {
        def tomcatScript = "/etc/init.d/tomcat"
        def tomcatHome = "/tomcat"
        sshexec {
            session(remotes.role("${program}-${environment}")) {
                execute "${tomcatScript} stop"
                put(war.archivePath.absolutePath, "${tomcatHome}/server/${war.archiveName}")
                put(listenerWar.archivePath.absolutePath, "${tomcatHome}/server/${listenerWar.archiveName}")
                execute "rm -rf ${tomcatHome}/logs/* ${tomcatHome}/work/* ${tomcatHome}/temp/* ${tomcatHome}/webapps/ROOT ${tomcatHome}/webapps/LISTENER"
                execute "${tomcatScript} start"
            }
        }
    } else if (environment.equals('eu_staging')){
        def tomcatScript = "/etc/init.d/tomcat_${program}_staging"
        def tomcatHome = "/usr/local/tomcats/${program}_staging"
        sshexec {
            session(remotes.role(environment)) {
                execute "${tomcatScript} stop"
                put(war.archivePath.absolutePath, "${tomcatHome}/webapps/${war.archiveName}")
                put(listenerWar.archivePath.absolutePath, "${tomcatHome}/webapps/${listenerWar.archiveName}")
                execute "rm -rf ${tomcatHome}/logs/* ${tomcatHome}/work/* ${tomcatHome}/temp/* ${tomcatHome}/webapps/ROOT ${tomcatHome}/webapps/LISTENER"
                execute "${tomcatScript} start"
            }
        }
    } else {
        def tomcatScript = "/etc/init.d/tomcat_${program}"
        def tomcatHome = "/usr/local/tomcats/${program}"
        sshexec {
            session(remotes.role(environment)) {            
                execute "${tomcatScript} stop"
                put(war.archivePath.absolutePath, "${tomcatHome}/webapps/${war.archiveName}")
                put(listenerWar.archivePath.absolutePath, "${tomcatHome}/webapps/${listenerWar.archiveName}")
                execute "rm -rf ${tomcatHome}/logs/* ${tomcatHome}/work/* ${tomcatHome}/temp/* ${tomcatHome}/webapps/ROOT ${tomcatHome}/webapps/LISTENER"
                execute "${tomcatScript} start"
            }
        }
    }
}

task runJob(dependsOn: classes) << {    
    if (!project.hasProperty('job'))
        throw new InvalidUserDataException("You must specify the name of the job to run")

    def job = jobMap[project.job]

    if (job == null)
        throw new InvalidUserDataException("The job you specified does not exist")

    def jobArgs = []
    def console = System.console()

    for (def tempArg : job.args)  {
        if (tempArg.startsWith("@")) {
            String propName = tempArg.substring(1)
			def propValue = System.getProperty(propName) != null ? System.getProperty(propName) : console.readLine("> Please enter the ${propName}: ")
            println("> Executing with value: ${propValue} for property: ${propName}")
            jobArgs.add(propValue)
        } else {
            jobArgs.add(tempArg)
        }
    }

    javaexec {
        systemProperties = System.getProperties()
        args = jobArgs
        main = job.class
        maxHeapSize = job.memory    
        classpath = sourceSets.main.runtimeClasspath.add(configurations.jobRuntime)
    }
}

task generatePricingJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, 'https://api.sprinterecycling.com/services/2_0/PricingService?wsdl')
    }
    
    baseName = 'erecyclingcorps-pricing'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir
}

task generateFedexShippingJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/ShipService_v9.wsdl'))
    }

    baseName = 'fedex-shipping'
    version = 'v9'
    excludes = ['**/*.java']
    from temporaryDir
}

task generateFedexTrackingJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/TrackService_v5.wsdl'))
    }
    
    baseName = 'fedex-tracking'
    version = 'v5'
    excludes = ['**/*.java']
    from temporaryDir
}

task generateFedexPickupJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/PickupService_v3.wsdl'))
    }
    
    baseName = 'fedex-pickup'
    version = 'v3'
    excludes = ['**/*.java']
    from temporaryDir
}

task generateVZWEmailJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/vzw_email.wsdl'))
    }
    
    baseName = 'vzw-email'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir    
}

task generateDHLShippingJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/DE.wsdl'))
    }
    
    baseName = 'dhl-shipping'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir
}

task generateDHLGermanyShippingJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, 'https://amsel.dpwn.net/abholportal/gw/lp/schema/1.0/var3ws.wsdl')
    }
        
    baseName = 'dhl-shipping-de'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir
}

task generateAmazonJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/AGCWSGateway.wsdl'))
    }
    
    baseName = 'amazon-ws'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir    
}

task generateOROVoucherManagementJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/VoucherService_1.wsdl'))
    }
        
    baseName = 'orange-voucherManagement'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir    
}

task generateOROSsoAuthJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, file('src/main/resources/wsdl/MultiAuth.wsdl'))
    }

    baseName = 'orange-sso'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir
}

task generatePurolatorJar(type: Jar) {
    doFirst {
        wsdl2Java(temporaryDir, 'http://support.pclusa.com/PurolatorOLS/WebServices/ShippingServices.asmx?WSDL')
    }
        
    baseName = 'purolator'
    version = new Date().format("yyyyMMdd")
    excludes = ['**/*.java']
    from temporaryDir
}

// *******************************************************************************
// **********************  Extensions - DO NOT MODIFY ****************************
// *******************************************************************************

def wsdl2Java(File tempDir, def wsdl) {    
    ant.taskdef (
        resource: 'org/apache/cxf/ant/extensions/antlib.xml'
        ,classpath: configurations.cxf.asPath
    )
    ant.wsdl2java (        
        destDir: tempDir
        ,sourceDestDir: tempDir
        ,wsdl: wsdl
    )

    def wsdlFile = new File(wsdl)

    if (wsdlFile.exists()) {
        copy {
            from wsdl
            into tempDir
        }
    }
}

processResources.doFirst {
    if (!project.hasProperty('program')) 
        throw new InvalidUserDataException('You must enter the program before running a build') 


    if (!program.equals('or_ro')) {
        excludes = ['**/logback.xml']
    }
  //  project.props.setProperty("siteName", project.getProperty('program'))

    filter ReplaceTokens, tokens: project.props
    
    includeEmptyDirs = false
}

/**
 * Replace the standard compile action with that of the IAJC Ant task.
 */
compileJava.deleteAllActions()
compileJava << {
    ant.taskdef ( 
        resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
        ,classpath: configurations.ajc.asPath
    )
    ant.iajc (
        source: sourceCompatibility
        ,target: targetCompatibility
        ,destDir: sourceSets.main.output.classesDir.absolutePath
        ,fork: 'false'
        ,inPath: configurations.ajInpath.asPath
        ,showWeaveInfo: 'true'
        ,aspectPath: configurations.aspects.asPath
        ,sourceRootCopyFilter: '**/.git/*,**/.svn/*,**/*.java,**/*.aj'
        ,classpath: configurations.compile.asPath
    ) {
        sourceroots {
            sourceSets.main.java.srcDirs.each{
                pathelement(location:it.absolutePath)
            }
        }
    }   
}
